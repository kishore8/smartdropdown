{"version":3,"sources":["CountriesSearch.js","App.js","debounce.js","serviceWorker.js","index.js"],"names":["CountriesSearch","React","memo","props","showList","countryList","length","className","map","country","onClick","e","selCountry","name","key","cioc","value","total","changeLimit","App","caretDownIcon","icon","faCaretDown","searchIcon","faSearch","useState","selectedCountry","setSelectedCountry","showCountryList","setShowCountryList","countryLimit","setCountryLimit","searchedCountry","setSearchedCountry","isSearching","setIsSearching","countries","setCountries","debouncedSearch","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","getAllCountries","Axios","get","then","response","data","catch","error","console","log","apiToGetSearchCountry","readOnly","placeholder","onChange","preventDefault","handleChange","persist","target","search","slice","countryName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7ac5fd12.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst CountriesSearch = React.memo((props) => {\r\n        const showList =  (props.countryList.length > 0 ) ? true : false;\r\n        return(\r\n            <div className=\"country-list\">\r\n                {!showList  ? \r\n                <div>\r\n                    <span>Country not found</span>\r\n                    <button className=\"add-country\">Add Country</button>\r\n                </div> :\r\n                props.countryList.map(country => \r\n                    <li onClick={(e) => {props.selCountry(e,country.name)}} key={country.cioc} value={country.name}>\r\n                        {country.name}\r\n                    </li>)}\r\n                {((props.total - props.countryList.length) > 0) ?\r\n                <a className=\"showMore\" onClick={props.changeLimit}> {'+' + ( props.total - props.countryList.length) + ' more'} </a>\r\n                : null}\r\n            </div>       \r\n        );\r\n});\r\n\r\nexport default CountriesSearch;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CountriesSearch from './CountriesSearch';\nimport Axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport {useDebounce} from './debounce';\n\nfunction App() {\n  const caretDownIcon = <FontAwesomeIcon icon={faCaretDown} />\n  const searchIcon = <FontAwesomeIcon icon={faSearch} />\n\n\n  const [selectedCountry,setSelectedCountry] = useState('');\n  const [showCountryList,setShowCountryList] = useState(false);\n  const [countryLimit,setCountryLimit] = useState(5);\n  const [searchedCountry, setSearchedCountry] = useState('');\n  const [isSearching , setIsSearching ]= useState(false);\n  const [countries,setCountries] = useState( []);\n  const debouncedSearch = useDebounce(searchedCountry, 500);\n\n  useEffect(() =>{\n    setIsSearching(true);\n    //trying to replicate a real time scenario by adding timeout\n    setTimeout(() =>{\n      getAllCountries();\n    },3000);\n  },[]);\n\n\n  const getAllCountries = () => {\n    Axios.get('https://restcountries.eu/rest/v2/all')\n      .then((response) =>{\n        setIsSearching(false)\n        setCountries(response.data);\n      }).catch(error => {\n        setIsSearching(false)\n        console.log(error);\n      });\n  }\n  const countryListToggle = (event) =>{\n    event.preventDefault();\n    setShowCountryList(!showCountryList);\n  } \n  const handleChange = (e) =>{\n      e.preventDefault();\n  }\n\n  const changeLimitToMax = () =>{\n      setCountryLimit(countries.length);\n  }\n\n  useEffect(() =>{\n    if(debouncedSearch){\n      setIsSearching(true);\n      apiToGetSearchCountry(debouncedSearch);\n    }\n  },[debouncedSearch])\n\n  const search = (e) => {\n      e.persist();\n      setSearchedCountry(e.target.value);\n      if(!e.target.value){\n        return getAllCountries();\n      }\n  }\n\n\n  const apiToGetSearchCountry = (e) =>{\n    Axios.get('https://restcountries.eu/rest/v2/name/'+ e)\n      .then((response) =>{\n        setIsSearching(false);\n        setCountries(response.data);\n      }).catch(error => {\n        setIsSearching(false);\n        setCountries([]);\n      });\n  }\n\n\n  const getSelCountry = (e,countryName) =>{\n    setSelectedCountry(countryName);\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"smart-dropdown\">\n        <div className=\"select\">\n          <input className=\"select-location\" readOnly=\"readonly\" placeholder=\"Select a location\"\n            onChange={(e) => {handleChange(e)}} value={selectedCountry}\n            onClick={(e) => {countryListToggle(e)}}/>\n            {caretDownIcon}\n        </div>\n        \n          {\n            showCountryList ? \n              <div className=\"dropdown\">\n              <div className=\"search-field\">\n              <input onChange={(e) => {search(e)}} value={searchedCountry}/>  \n              {searchIcon}\n              </div>\n              {isSearching ?  <p>Loading...</p> : \n              <CountriesSearch changeLimit={changeLimitToMax}\n              countryList={countries.slice(0,countryLimit)} \n              total={countries.length} selCountry={getSelCountry}\n              />}\n              </div> \n            :\n            null\n          }\n      </div>\n       \n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\r\n\r\nexport function useDebounce(value, delay) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n      }, delay);\r\n      return () => { clearTimeout(handler);};\r\n    },[value]);\r\n\r\n  return debouncedValue;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}